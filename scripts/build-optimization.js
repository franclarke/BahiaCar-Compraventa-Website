#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

console.log('üöÄ Iniciando proceso de optimizaci√≥n del build...\n');

// 1. Limpiar archivos anteriores
console.log('üßπ Limpiando archivos de build anteriores...');
try {
  execSync('rm -rf .next', { stdio: 'inherit' });
  console.log('‚úÖ Archivos anteriores eliminados\n');
} catch (error) {
  console.log('‚ö†Ô∏è  No hay archivos anteriores para limpiar\n');
}

// 2. Verificar dependencias
console.log('üì¶ Verificando dependencias...');
try {
  execSync('npm audit --audit-level moderate', { stdio: 'inherit' });
  console.log('‚úÖ Dependencias verificadas\n');
} catch (error) {
  console.log('‚ö†Ô∏è  Se encontraron vulnerabilidades en dependencias\n');
}

// 3. Generar Prisma client
console.log('üîß Generando Prisma client...');
try {
  execSync('npx prisma generate', { stdio: 'inherit' });
  console.log('‚úÖ Prisma client generado\n');
} catch (error) {
  console.log('‚ùå Error generando Prisma client');
  process.exit(1);
}

// 4. Lint del c√≥digo
console.log('üîç Ejecutando linter...');
try {
  execSync('npm run lint', { stdio: 'inherit' });
  console.log('‚úÖ Linter completado sin errores\n');
} catch (error) {
  console.log('‚ö†Ô∏è  Se encontraron problemas de linting');
  console.log('üîß Intentando corregir autom√°ticamente...');
  try {
    execSync('npm run lint:fix', { stdio: 'inherit' });
    console.log('‚úÖ Problemas de linting corregidos\n');
  } catch (fixError) {
    console.log('‚ùå No se pudieron corregir todos los problemas de linting');
    console.log('Por favor revisa manualmente los errores de linting antes de continuar\n');
  }
}

// 5. Verificar tipos de TypeScript
console.log('üìù Verificando tipos de TypeScript...');
try {
  execSync('npm run type-check', { stdio: 'inherit' });
  console.log('‚úÖ Verificaci√≥n de tipos completada\n');
} catch (error) {
  console.log('‚ùå Errores de tipos de TypeScript encontrados');
  process.exit(1);
}

// 6. Build de la aplicaci√≥n
console.log('üèóÔ∏è  Construyendo aplicaci√≥n...');
const buildStart = Date.now();

try {
  execSync('npm run build', { stdio: 'inherit' });
  const buildTime = ((Date.now() - buildStart) / 1000).toFixed(2);
  console.log(`‚úÖ Build completado en ${buildTime} segundos\n`);
} catch (error) {
  console.log('‚ùå Error durante el build');
  process.exit(1);
}

// 7. Analizar tama√±o del bundle
console.log('üìä Analizando tama√±o del bundle...');
try {
  const buildDir = path.join(process.cwd(), '.next');
  
  if (fs.existsSync(buildDir)) {
    // Buscar archivos JS en el directorio static
    const staticDir = path.join(buildDir, 'static/chunks');
    
    if (fs.existsSync(staticDir)) {
      const files = fs.readdirSync(staticDir);
      const jsFiles = files.filter(file => file.endsWith('.js'));
      
      let totalSize = 0;
      const bundleInfo = [];
      
      jsFiles.forEach(file => {
        const filePath = path.join(staticDir, file);
        const stats = fs.statSync(filePath);
        const sizeKB = (stats.size / 1024).toFixed(2);
        totalSize += stats.size;
        
        bundleInfo.push({
          name: file,
          size: sizeKB
        });
      });
      
      // Ordenar por tama√±o descendente
      bundleInfo.sort((a, b) => parseFloat(b.size) - parseFloat(a.size));
      
      console.log('\nüì¶ Informaci√≥n del bundle:');
      console.log(`üìè Tama√±o total de JS: ${(totalSize / 1024).toFixed(2)} KB`);
      console.log('\nüîù Archivos m√°s grandes:');
      
      bundleInfo.slice(0, 5).forEach((file, index) => {
        console.log(`${index + 1}. ${file.name}: ${file.size} KB`);
      });
      
      // Recomendaciones basadas en el tama√±o
      if (totalSize > 1024 * 500) { // > 500KB
        console.log('\n‚ö†Ô∏è  El bundle es grande (>500KB). Considera:');
        console.log('   ‚Ä¢ Implementar code splitting con dynamic imports');
        console.log('   ‚Ä¢ Revisar dependencias no utilizadas');
        console.log('   ‚Ä¢ Usar tree shaking m√°s agresivo');
      } else {
        console.log('\n‚úÖ Tama√±o del bundle est√° en un rango aceptable');
      }
    }
  }
} catch (error) {
  console.log('‚ö†Ô∏è  No se pudo analizar el tama√±o del bundle');
}

// 8. Recomendaciones finales
console.log('\nüéØ Recomendaciones de optimizaci√≥n:');
console.log('   ‚Ä¢ Aseg√∫rate de usar `next/image` para todas las im√°genes');
console.log('   ‚Ä¢ Implementa lazy loading para componentes pesados');
console.log('   ‚Ä¢ Usa `next/dynamic` para importaciones condicionales');
console.log('   ‚Ä¢ Configura `next.config.js` para optimizaci√≥n de producci√≥n');
console.log('   ‚Ä¢ Considera implementar Service Worker para caching');

console.log('\nüéâ Proceso de optimizaci√≥n completado!');
console.log('üí° Para producci√≥n, ejecuta: npm run start');

// 9. Crear reporte de optimizaci√≥n
const reportData = {
  timestamp: new Date().toISOString(),
  buildTime: 'Ver logs',
  recommendations: [
    'Usar componente OptimizedImage para todas las im√°genes',
    'Implementar lazy loading con React.lazy()',
    'Configurar preconnect para recursos externos',
    'Minificar CSS y JS en producci√≥n',
    'Implementar an√°lisis de bundle con webpack-bundle-analyzer'
  ]
};

fs.writeFileSync(
  path.join(process.cwd(), 'optimization-report.json'),
  JSON.stringify(reportData, null, 2)
);

console.log('üìä Reporte de optimizaci√≥n guardado en optimization-report.json'); 